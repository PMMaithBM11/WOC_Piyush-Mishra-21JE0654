{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Linear Regression","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPIyJ70tXINYV1gDRKe1J5u"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"kJ3CpJhx5Q0J","executionInfo":{"status":"ok","timestamp":1649403283154,"user_tz":-330,"elapsed":639,"user":{"displayName":"Piyush Mishra","userId":"18021905101262466212"}}},"outputs":[],"source":["#importing libraries to be used\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import math"]},{"cell_type":"code","source":["from google.colab import drive \n","drive.mount('/content/drive')"],"metadata":{"id":"Z55tN2teQGsm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/\n","! mkdir linear_data"],"metadata":{"id":"oW9kkRygRKF8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pwd"],"metadata":{"id":"aLCg4qDJdSpb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%cd linear_data/"],"metadata":{"id":"VWHNRA3WdYIZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%cp /content/Linear_train.csv /content/drive/MyDrive/linear_data\n","%cp /content/Linear_test.csv /content/drive/MyDrive/linear_data"],"metadata":{"id":"GxZ53oYMehba"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["! ls"],"metadata":{"id":"Pgy1n1qqhcrB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_path='/content/drive/MyDrive/linear_data/Linear_train.csv'\n","test_path='/content/drive/MyDrive/linear_data/Linear_test.csv'\n","train=pd.read_csv(train_path)\n","\n","test=pd.read_csv(test_path)\n","train.head(50000)"],"metadata":{"id":"qdrAPWccifTw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# null values were showing, so replaced them with the mean of the respective column\n","for col in train.columns:\n","  col_mean=train[col].mean()\n","  train[col].fillna(value=col_mean, inplace=True)\n","for col in test.columns:\n","   col_mean=test[col].mean()\n","   test[col].fillna(value=col_mean, inplace=True)\n","  "],"metadata":{"id":"PhXaRYxB9749"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test.isnull().sum().sum()"],"metadata":{"id":"U9dcTfpf-SJx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(train)"],"metadata":{"id":"3LL1-qawEVMj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Normalization\n","train = train.copy()\n","\n","for column in train.columns:\n","    train[column] = train[column]  / train[column].abs().max()\n","      \n","\n","display(train)"],"metadata":{"id":"vImnXGq0vqgm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X=train.drop([\"label\", \"Unnamed: 0\"], axis=1)\n","X.head()\n","print(X.to_numpy())\n","print(X.shape)"],"metadata":{"id":"lAzAew-fuVFa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Y=train[\"label\"]\n","print(Y.to_numpy())\n","print(Y.shape)"],"metadata":{"id":"UEZDZliNP1mq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test.head()"],"metadata":{"id":"LaCbjcOQubC3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Normalization\n","\n","test = test.copy()\n","  \n","\n","for column in test.columns:\n","    test[column] = test[column]  / test[column].abs().max()\n","      \n","\n","display(test)"],"metadata":{"id":"z9VOIDulwYgB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X2=test.drop([\"label\", \"Unnamed: 0\"], axis=1)\n","X2.head()"],"metadata":{"id":"f6Ftjm5FSDAL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Y2=test[\"label\"]\n","Y2.head()"],"metadata":{"id":"owxSWz51SD7-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Shape of X_train :\", X.shape)\n","print(\"Shape of Y_train :\", Y.shape)\n","print(\"Shape of X_test :\", X2.shape)\n","print(\"Shape of Y_test :\", Y2.shape)\n","Y=np.vstack(Y)\n","print(Y.shape)"],"metadata":{"id":"Hu1iQEkORdm6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = np.vstack((np.ones((X.shape[0], )), X.T)).T # adding column of ones for multiplication with theta0\n","print(X.shape)\n","\n"],"metadata":{"id":"7Ea40hE5uiHf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X2 = np.vstack((np.ones((X2.shape[0], )), X2.T)).T\n","print(X2.shape)\n"],"metadata":{"id":"ZG4YVex1HFhz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Y2 = np.vstack((np.ones((Y2.shape[0], )), Y2.T)).T\n","print(Y2.shape)"],"metadata":{"id":"7ISVTZkR2ze9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def mdl(X, Y, lr , i): # our modelfunction\n"," m = Y.size # no. of training set values\n"," theta = np.zeros((X.shape[1], 1))\n","# gradient descent\n"," clist = []\n"," j=1\n"," while(j<=i):\n","       \n","     y_pred = np.dot(X, theta) # hypothesis\n","     cost = (1/(2*m))*np.sum(np.square(y_pred - Y)) # cost function (J) \n","     d_theta = (1/m)*np.dot(X.T, y_pred - Y) #\n","     theta = theta - lr*d_theta\n","     clist.append(cost)\n","     \n","     \n","     if(j%(i//10) == 0):\n","      print(\"Cost is :\", cost)\n","     j=j+1\n"," return theta, clist"],"metadata":{"id":"gVPJdgDTulzi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"DoVAsFAxGt9n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["i = 100\n","lr = 0.1\n","theta, clist = mdl(X, Y, lr=lr , i=i) # various values of cost functions at each itertion (stored in array clist)"],"metadata":{"id":"ENokBTc1upIX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rng = np.arange(0, i) # expressing values of'i' (equally spaced ) on the X axis\n","plt.plot(rng, clist)# clist on y axis\n","plt.show()"],"metadata":{"id":"DC4VdXVsusIE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["s=X2.shape[0]\n","s"],"metadata":{"id":"hn6kdpvbJnAq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred=np.dot(X2, theta) # value of our hypothesis for various inpits \n","\n","print(y_pred)"],"metadata":{"id":"Uxp9Vyf7CbTX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","y_pred = np.vstack((np.ones((y_pred.shape[0], )), y_pred.T)).T # re-shaping y_pred for ease in futher calculations\n"],"metadata":{"id":"uLF86BwQCbWo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(y_pred.shape)\n","print(Y2.shape)"],"metadata":{"id":"OEXfylB32ExA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["f=((Y2-y_pred)*(Y2-y_pred))\n","f\n"],"metadata":{"id":"k4fnjkvi1-6-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["e=np.sum(f)\n","e"],"metadata":{"id":"Fwh6ucAkBipT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["RMSE=(1/s)*math.sqrt(e) # RMSE,  using sqrt function of math library \n","RMSE"],"metadata":{"id":"cm_zLiStCbZW"},"execution_count":null,"outputs":[]}]}